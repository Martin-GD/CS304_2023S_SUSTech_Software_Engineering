<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.team127.atom.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.team127.atom.model.User">
        <constructor>
            <arg column="id" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="bio" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="location" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="company" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="created_at" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="updated_at" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="auth" javaType="java.lang.Integer" jdbcType="INTEGER"/>
        </constructor>
    </resultMap>

    <resultMap id="ResultMapWithBLOBs" type="com.team127.atom.model.User">
        <constructor>
            <arg column="id" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="bio" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="location" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="company" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="created_at" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="updated_at" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="email" javaType="java.lang.String" jdbcType="LONGVARCHAR"/>
            <arg column="password" javaType="java.lang.String" jdbcType="LONGVARCHAR"/>
            <arg column="auth" javaType="java.lang.Integer" jdbcType="INTEGER"/>
        </constructor>
    </resultMap>

    <sql id="Base_Column_List">
        id, name, bio, location, company, created_at, updated_at, auth
    </sql>

    <sql id="Blob_Column_List">
        email, password
    </sql>

    <insert id="insert" parameterType="com.team127.atom.model.User">
        insert into user (id, name, bio,
                          location, company, created_at,
                          updated_at, email, password, auth)
        values (#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{bio,jdbcType=VARCHAR},
                #{location,jdbcType=VARCHAR}, #{company,jdbcType=VARCHAR}, #{createdAt,jdbcType=VARCHAR},
                #{updatedAt,jdbcType=VARCHAR}, #{email,jdbcType=LONGVARCHAR}, #{password,jdbcType=LONGVARCHAR},
                #{auth,jdbcType=INTEGER})
    </insert>
    
  <insert id="publishNotification">
    insert into notification(title, content, time) values (#{title,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR},
                                                           #{time,jdbcType=BIGINT});
  </insert>

  <insert id="insertSelective" parameterType="com.team127.atom.model.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="bio != null">
        bio,
      </if>
      <if test="location != null">
        location,
      </if>
      <if test="company != null">
        company,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="auth != null">
        auth,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="bio != null">
        #{bio,jdbcType=VARCHAR},
      </if>
      <if test="location != null">
        #{location,jdbcType=VARCHAR},
      </if>
      <if test="company != null">
        #{company,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=VARCHAR},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=LONGVARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=LONGVARCHAR},
      </if>
      <if test="auth != null">
        #{auth,jdbcType=INTEGER}
      </if>
    </trim>
  </insert>
  <delete id="deleteById" parameterType="java.lang.String">
    delete from user where id = #{id,jdbcType=VARCHAR}
  </delete>
  <select id="selectUserById" parameterType="java.lang.String" resultType="com.team127.atom.model.User">
    select * from user where id = #{id,jdbcType=VARCHAR}
  </select>

  <select id="getNotifications" resultType="com.team127.atom.model.Notification">
    select * from notification;
  </select>

  <select id="selectUserByName" parameterType="java.lang.String" resultType="com.team127.atom.model.User">
    select * from user where name = #{name,jdbcType=VARCHAR}
  </select>
  <select id="selectLikeUser" parameterType="java.lang.String" resultType="com.team127.atom.model.User">
    select * from atom.user join user_like_user cul on user.id = cul.like_user and cul.user = #{id,jdbcType=VARCHAR}
  </select>
  <select id="isLike" resultType="java.lang.Integer">
    select count(*)
    from user_like_user where (user = #{id, jdbcType=VARCHAR} and like_user = #{likeid,jdbcType=VARCHAR})
  </select>

    <select id="selectBeLikedUser" resultType="com.team127.atom.model.User">
        select *
        from user
                 join user_like_user on like_user = #{userId, jdbcType=VARCHAR} and user = atom.user.id
    </select>
    <select id="selectFollowerCount" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(*)
        from user_like_user
        where like_user = #{id, jdbcType=VARCHAR}
    </select>
    <select id="selectLikeUserCount" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(*)
        from user_like_user
        where user = #{id, jdbcType=VARCHAR}
    </select>
    <select id="selectRecommendUsers" parameterType="java.lang.String" resultType="com.team127.atom.model.User">
        select distinct * from user where user.id not in (select user from user_like_user where like_user = #{id, jdbcType=VARCHAR}) and user.id != #{id, jdbcType=VARCHAR}
    </select>
    <insert id="likeUser" parameterType="java.lang.String">
        insert into user_like_user
        values (#{id, jdbcType=VARCHAR}, #{likeId, jdbcType=VARCHAR})
    </insert>
    <delete id="unlikeUser" parameterType="java.lang.String">
        delete
        from user_like_user
        where user = #{id, jdbcType=VARCHAR}
          and like_user = #{likeId, jdbcType=VARCHAR}
    </delete>
    <update id="updatePassword" parameterType="com.team127.atom.model.User">
        update user
        <set>
            <if test="password!=null">
                password = #{password, jdbcType=VARCHAR}
            </if>
        </set>
        where id = #{id, jdbcType=VARCHAR}
    </update>
    <update id="updateUser" parameterType="com.team127.atom.model.User">
        update user
        <set>
            <if test="bio!=null">
                bio = #{bio,jdbcType=VARCHAR},
            </if>
            <if test="location!=null">
                location = #{location,jdbcType=VARCHAR},
            </if>
            <if test="company!=null">
                company = #{company,jdbcType=VARCHAR}
            </if>
            <!--      <if test="password!=null">-->
            <!--        password = #{password, jdbcType=VARCHAR}-->
            <!--      </if>-->
        </set>
        where id = #{id, jdbcType=VARCHAR}
    </update>
</mapper>